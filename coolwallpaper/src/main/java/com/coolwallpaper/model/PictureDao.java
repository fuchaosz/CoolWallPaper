package com.coolwallpaper.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.coolwallpaper.model.Picture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_picture".
*/
public class PictureDao extends AbstractDao<Picture, Long> {

    public static final String TABLENAME = "tb_picture";

    /**
     * Properties of entity Picture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ThumbUrl = new Property(1, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property DownloadUrl = new Property(2, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property FromUrl = new Property(3, String.class, "fromUrl", false, "FROM_URL");
        public final static Property Width = new Property(4, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(5, Integer.class, "height", false, "HEIGHT");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property ParamId = new Property(7, long.class, "paramId", false, "PARAM_ID");
    };

    private DaoSession daoSession;

    private Query<Picture> param_PictureListQuery;

    public PictureDao(DaoConfig config) {
        super(config);
    }
    
    public PictureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_picture\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"THUMB_URL\" TEXT," + // 1: thumbUrl
                "\"DOWNLOAD_URL\" TEXT UNIQUE ," + // 2: downloadUrl
                "\"FROM_URL\" TEXT," + // 3: fromUrl
                "\"WIDTH\" INTEGER," + // 4: width
                "\"HEIGHT\" INTEGER," + // 5: height
                "\"DESC\" TEXT," + // 6: desc
                "\"PARAM_ID\" INTEGER NOT NULL );"); // 7: paramId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_picture\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Picture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(2, thumbUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(3, downloadUrl);
        }
 
        String fromUrl = entity.getFromUrl();
        if (fromUrl != null) {
            stmt.bindString(4, fromUrl);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(5, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
        stmt.bindLong(8, entity.getParamId());
    }

    @Override
    protected void attachEntity(Picture entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Picture readEntity(Cursor cursor, int offset) {
        Picture entity = new Picture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumbUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // downloadUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromUrl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // width
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.getLong(offset + 7) // paramId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Picture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThumbUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWidth(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParamId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Picture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Picture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pictureList" to-many relationship of Param. */
    public List<Picture> _queryParam_PictureList(long paramId) {
        synchronized (this) {
            if (param_PictureListQuery == null) {
                QueryBuilder<Picture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParamId.eq(null));
                param_PictureListQuery = queryBuilder.build();
            }
        }
        Query<Picture> query = param_PictureListQuery.forCurrentThread();
        query.setParameter(0, paramId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getParamDao().getAllColumns());
            builder.append(" FROM tb_picture T");
            builder.append(" LEFT JOIN tb_param T0 ON T.\"PARAM_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Picture loadCurrentDeep(Cursor cursor, boolean lock) {
        Picture entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Param param = loadCurrentOther(daoSession.getParamDao(), cursor, offset);
         if(param != null) {
            entity.setParam(param);
        }

        return entity;    
    }

    public Picture loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Picture> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Picture> list = new ArrayList<Picture>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Picture> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Picture> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
